/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package iut;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

/**
 * Représente l'écran sur lequel les composants vont s'exécuter
 * Est une application GUI
 * Gère les clics souris
 * @author aguidet
 */
public class Ecran extends javax.swing.JFrame implements MouseListener {

    private BufferedImage buffer; /**< image tampon pour dessiner */
    private Fenetre root=null; /**< fenêtre contenue dans l'écran */
    
    /**
     * Ouvre un écran
     * @param titre le titre de l'application
     * @param largeur la largeur (pixels) de l'application
     * @param hauteur la hauteur (pixels) de l'application
     */
    public Ecran(String titre, int largeur, int hauteur) {
        initComponents();
        
        this.setTitle(titre);
        this.setBounds(0,0,largeur,hauteur);
        buffer = new BufferedImage(this.getWidth(),this.getHeight(), BufferedImage.TYPE_INT_ARGB);        
        
        this.addMouseListener(this);
    }
    
    /**
     * Change la fenêtre principale de l'application
     * @param c 
     */
    public void setRoot(Fenetre c)
    {
        root = c;
    }
    

    public int getLargeur(){return this.getWidth();}
    public int getHauteur(){return this.getHeight();}
    
/**
 * Dessine l'application
 * @param g 
 */    
    public void paint(Graphics g)
    {     
        root.dessiner(this);
        g.drawImage(buffer,0,0,null);
    }
    
    /**
	 * trace un rectangle plein
	 * @param x1 absisse du coin haut gauche
	 * @param y1 ordonnée du coin haut gauche
	 * @param largeur largeur du rectangle
	 * @param hauteur hauteur du rectangle
	 * @param couleur couleur (RVB) du rectangle
	 */
	public void traceRectangle(int x1, int y1, int largeur, int hauteur, int couleur) {
		Graphics g = buffer.getGraphics();
                Color c = new Color(0xFF000000+couleur);
                g.setColor(c);
                g.fillRect(x1,y1,largeur,hauteur);                
	}
        
        	/**
	 * Trace un texte
	 * @param x absisse du départ du texte
	 * @param y ordonnée du départ du texte
	 * @param txt texte à afficher
	 * @param p police de caractères à utiliser
	 */
	public void traceTexte(int x, int y, String txt, Police p) {
		Graphics g = buffer.getGraphics();
                g.setColor(Color.BLACK);
                /*Font f = new Font(p.getNom(),p.getTaille(),0);                               
                g.setFont(f);                */
                g.drawString(txt, x+2, y+18);
	}
        
        /**
	 * trace une ligne
	 * @param x1 absisse de départ
	 * @param y1 ordonnée de départ
	 * @param x2 absisse d'arrivée
	 * @param y2 ordonnée d'arrivée
	 * @param couleur couleur (RVB) du tracé
	 */
	public void traceLigne(int x1, int y1, int x2, int y2, int couleur) {
		Graphics g = buffer.getGraphics();
                g.setColor(new Color(couleur));
                g.drawLine(x1, y1, x2, y2);
	}
        
        /**
	 * @param x abssise du coin haut gauche
	 * @param y ordonnée du coin haut gauche
	 * @param largeur largeur du rectangle
	 * @param hauteur hauteur du rectangle
     * @param couleur la couleur du rectangle
	 */
	public void traceRectangleArrondi(int x, int y, int largeur, int hauteur, int couleur) {
		Graphics g = buffer.getGraphics();
                Color c = new Color(0xFF000000+couleur);
                g.setColor(c);
                g.fillRoundRect(x,y,largeur,hauteur,8  ,8); 
              
	}
        
        /**
         * Trace un cercle
         * @param x absisse du centre
         * @param y ordonnée du centre
         * @param r rayon du cercle
         * @param couleur couleur du cercle
         */
        public void traceCercle(int x, int y, int r, int couleur)
        {
            Graphics g = buffer.getGraphics();
            Color c = new Color(0xFF000000+couleur);
            g.setColor(c);
            g.fillOval(x-r, y-r, 2*r, 2*r);
        }
        /**
	 * efface la totalité de l'écran
	 */
	public void efface() {
		buffer = new BufferedImage(getWidth(),getHeight(),BufferedImage.TYPE_INT_ARGB);
	}
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent me) {
       if(root!=null)
       {
           root.clic(me.getX(),me.getY());       
           this.repaint();
       }
    }

    @Override
    public void mousePressed(MouseEvent me) {
        
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        
    }

    @Override
    public void mouseExited(MouseEvent me) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
